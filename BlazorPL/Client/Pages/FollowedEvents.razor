@page "/followed-events"
@inject AuthenticationStateProvider AuthState
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager uriHelper
@inject FollowedEventState State
@implements IDisposable

<AuthorizeView>
    <Authorized>

        <MudPaper Class="d-flex justify-center py-7 p-5" Style="margin-top:20px; background-color: rgba(0,0,0,0.5)" Square="false">
            <MudText Typo="Typo.h2" Align="Align.Center" Style="margin-top: 10px; margin-bottom:20px; color: #ECEFF1"><b>Követett események</b></MudText>
        </MudPaper>

        <MudPaper Class="d-flex flex-column align-items-center p-5" Style="margin-top:15px; height:75%; background-color: rgba(0,0,0,0.5)" Square="false">
            <MudPaper Class="d-flex justify-center p-5" Square="false" Style="width:100%; margin-bottom:15px">
                <MudGrid Spacing="10" Justify="Justify.Center" Class="align-items-end pb-5">
                    <MudItem xs="2" sm="2" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudText Typo="Typo.body1" Align="Align.Right" Style="font-size:20px">Szűrés:</MudText>
                    </MudItem>
                    <MudItem xs="4" sm="4" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudTextField T="string" Label="Szűrési feltétel..." Required="false" />
                    </MudItem>
                    <MudItem xs="4" sm="4" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudSelect T="string" Label="Mi alapján szűrjön..." Required="true" RequiredError="Kérlek válaszd ki mi alapján szűrjön!">
                            <MudSelectItem Value="@("Program neve")" />
                            <MudSelectItem Value="@("Helyszín")" />
                            <MudSelectItem Value="@("Dátum (yyyy-MM-dd)")" />
                            <MudSelectItem Value="@("Szervező neve")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="2" sm="2" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudButton Variant="Variant.Outlined">Szűrés</MudButton>
                    </MudItem>

                </MudGrid>
            </MudPaper>
            @if (State.Events != null)
            {
                <div class="bastya" style="height:100%;overflow-y:scroll ;width:100%;">
                    <Virtualize Items="State.Events" Context="e" OverscanCount="4">
                        <FollowedComponent _event="e"></FollowedComponent>
                    </Virtualize>
                </div>
            }

        </MudPaper>

    </Authorized>
    <NotAuthorized>

        <RedirectToLogin></RedirectToLogin>

    </NotAuthorized>
</AuthorizeView>

@code {

    public EventDto[] events { get; set; }
    public string UserId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        UserId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;

        var http = HttpClientFactory.CreateClient("BlazorPL.PublicServerAPI");
        events = await http.GetFromJsonAsync<EventDto[]>($"api/events/followed-event/{UserId}");

        State.Initialize(events);

    }

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }
}
