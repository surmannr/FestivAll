@page "/my-events"
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthState
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@using FluentValidation

<AuthorizeView Roles="Organizer">

    <Authorized>

        <MudPaper Class="d-flex justify-center py-7 p-5" Style="margin-top:20px; background-color: rgba(0,0,0,0.5)" Square="false">
            <MudText Typo="Typo.h2" Align="Align.Center" Style="margin-top: 10px; margin-bottom:20px; color: #ECEFF1"><b>Általam szervezett események</b></MudText>
        </MudPaper>

        <MudPaper Class="d-flex flex-column align-items-center p-5" Style="margin-top:15px; height:75%; background-color: rgba(0,0,0,0.5)" Square="false">

            <MudPaper Class="d-flex justify-center p-5" Square="false" Style="width:100%; margin-bottom:15px">
                <MudGrid Spacing="10" Justify="Justify.Center" Class="align-items-end pb-5">
                    <MudItem xs="2" sm="2" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudText Typo="Typo.body1" Align="Align.Right" Style="font-size:20px">Szűrés:</MudText>
                    </MudItem>
                    <MudItem xs="4" sm="4" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudTextField T="string" Label="Szűrési feltétel..." Required="false" />
                    </MudItem>
                    <MudItem xs="4" sm="4" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudSelect T="string" Label="Mi alapján szűrjön..." Required="true" RequiredError="Kérlek válaszd ki mi alapján szűrjön!">
                            <MudSelectItem Value="@("Program neve")" />
                            <MudSelectItem Value="@("Helyszín")" />
                            <MudSelectItem Value="@("Dátum (yyyy-MM-dd)")" />
                            <MudSelectItem Value="@("Szervező neve")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="2" sm="2" Class="d-flex align-center justify-center mud-width-full py-8">
                        <MudButton Variant="Variant.Outlined">Szűrés</MudButton>
                    </MudItem>

                </MudGrid>
            </MudPaper>

            @if (events != null)
            {

                if (events.Count() > 0)
                {
                    <div class="bastya" style="height:100%;overflow-y:scroll ;width:100%; padding:0 15px 0 15px">

                        <MudExpansionPanels Style="margin-top: 30px; margin-bottom: 30px; width:100%" Elevation="1" DisableBorders="true">

                            <Virtualize Items="events" Context="e" OverscanCount="4">
                                <OrganizerEventComponent Event="e" UserId="@UserId" OnClick="()=>Remove(e)"></OrganizerEventComponent>
                            </Virtualize>


                        </MudExpansionPanels>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="margin-top:40px; color:aliceblue">Nincsen egyetlen egy esemény sem amit te szerveztél.</MudText>
                }
            }
            <MudButton Color="Color.Info" Variant="Variant.Filled" DisableElevation="true" OnClick="OpenDialog" Style="margin-top:20px">Új esemény létrehozás</MudButton>

        </MudPaper>

        @if (newEvent != null && newFirstTicket != null && moreTickets != null)
        {
            <EventCreationDialog OnClick="()=>Add()" visible="visible" dialog="dialog" events="events" moreTickets="moreTickets" newEvent="newEvent" newFirstTicket="newFirstTicket"></EventCreationDialog>
        }



    </Authorized>
    <NotAuthorized>
        <AccessDenied></AccessDenied>
    </NotAuthorized>

</AuthorizeView>



@code {

    public List<EventDto> events;

    public string UserId { get; set; }

    MudBlazor.DialogOptions options { get; set; } = new MudBlazor.DialogOptions()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        CloseButton = true
    };

    MudDialog dialog { get; set; } = new MudDialog();

    bool visible { get; set; } = false;

    HttpClient http = new HttpClient();

    #region Létrehozás

    public EventDto newEvent { get; set; } = new EventDto();
    public TicketDto newFirstTicket { get; set; } = new TicketDto();
    public LinkedList<TicketDto> moreTickets { get; set; } = new LinkedList<TicketDto>();
    public DateTime? StartDate = DateTime.Today;
    #endregion

    public NotBelowZero NotBelowZeroValidation { get; set; } = new NotBelowZero();
    public NotEmpty NotEmptyValidation { get; set; } = new NotEmpty();

    protected override void OnInitialized()
    {
        newEvent.Location = "";
        newEvent.Name = "";
        newEvent.StartDate = DateTime.Now;

        newFirstTicket.Category = "";
        newFirstTicket.InStock = 0;
        newFirstTicket.Price = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        UserId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;

        newEvent.CreatorUserId = UserId;

        http = HttpClientFactory.CreateClient("BlazorPL.PublicServerAPI");
        events = await http.GetFromJsonAsync<List<EventDto>>($"api/events/creator?userId={UserId}");
    }
    private void OpenDialog()
    {
        visible = true;
    }


    public void Remove(EventDto e)
    {
        events.Remove(e);
        visible = false;
    }

    public void Add()
    {
        visible = false;
    }

    #region Validátor osztályok
    public class NotBelowZero : AbstractValidator<int>
    {
        public NotBelowZero()
        {
            RuleFor(x => x).GreaterThanOrEqualTo(0);
        }
    }
    public class NotEmpty : AbstractValidator<string>
    {
        public NotEmpty()
        {
            RuleFor(x => x).NotEmpty().MaximumLength(100);
        }
    }
    #endregion
}
