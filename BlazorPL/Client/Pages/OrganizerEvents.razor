@page "/my-events"
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthState
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@using FluentValidation

<AuthorizeView Roles="Organizer">

    <Authorized>

        <MudPaper Class="d-flex justify-center py-7 p-5" Style="margin-top:20px; background-color: rgba(0,0,0,0.5)" Square="false">
            <MudText Typo="Typo.h2" Align="Align.Center" Style="margin-top: 10px; margin-bottom:20px; color: #ECEFF1"><b>Általam szervezett események</b></MudText>
        </MudPaper>

        <MudPaper Class="d-flex flex-column align-items-center py-7 p-5" Style="margin-top:15px; height:75%; background-color: rgba(0,0,0,0.5)" Square="false">
            <MudGrid Style="margin-top:10px; margin-bottom: 10px; width:100%">
                <MudItem xs="12">
                    <MudPaper Class="d-flex justify-center py-7 p-5" Square="false">
                        <MudGrid Spacing="10" Justify="Justify.Center" Class="align-items-end pb-5">
                            <MudItem xs="2" sm="2" Class="d-flex align-center justify-center mud-width-full py-8">
                                <MudText Typo="Typo.body1" Align="Align.Right" Style="font-size:20px">Szűrés:</MudText>
                            </MudItem>
                            <MudItem xs="4" sm="4" Class="d-flex align-center justify-center mud-width-full py-8">
                                <MudTextField T="string" @bind-Value="Filter" Label="Szűrési feltétel..." Required="false" />
                            </MudItem>
                            <MudItem xs="4" sm="4" Class="d-flex align-center justify-center mud-width-full py-8">
                                <MudSelect T="string" Label="Mi alapján szűrjön..." @bind-Value="FilterType" Required="true" RequiredError="Kérlek válaszd ki mi alapján szűrjön!">
                                    <MudSelectItem Value="@("Program neve")" />
                                    <MudSelectItem Value="@("Helyszín")" />
                                    <MudSelectItem Value="@("Dátum (yyyy.MM.dd.)")" />
                                    <MudSelectItem Value="@("Szervező neve")" />
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2" sm="2" Class="d-flex align-center justify-around mud-width-full py-8">
                                <MudButton Variant="Variant.Outlined" OnClick="FilterBy" Style="margin-right:10px">Szűrés</MudButton>
                                @if (events.Count() != AllEvents.Count())
                                {
                                    <MudIcon Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" @onclick="RemoveFilter"></MudIcon>
                                }

                            </MudItem>

                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            @if (events != null)
            {

                if (events.Count() > 0)
                {
                    <div class="bastya" style="height:100%;overflow-y:scroll ;width:100%; padding:0 15px 0 15px">

                        <MudExpansionPanels Style="margin-top: 30px; margin-bottom: 30px; width:100%" Elevation="1" DisableBorders="true">

                            <Virtualize Items="events" Context="e" OverscanCount="4">
                                <OrganizerEventComponent Event="e" UserId="@UserId" OnClick="()=>Remove(e)" OnClickModify="() => Modify(e)" OnClickDuplicate="() => Duplicate(e)"></OrganizerEventComponent>
                            </Virtualize>


                        </MudExpansionPanels>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="margin-top:40px; color:aliceblue">Nincsen egyetlen egy esemény sem amit te szerveztél.</MudText>
                }
            }
            <MudButton Color="Color.Info" Variant="Variant.Filled" DisableElevation="true" OnClick="OpenDialog" Style="margin-top:20px">Új esemény létrehozás</MudButton>

        </MudPaper>
  
            <EventCreationDialog newEvent="newEvent" OnClick="(e) => Add(e)" OnModifyClick="(e) => ModifyClick(e)" ModifyButton="@ModifyButton" newFirstTicket="ticketfirst" moreTickets="tickets" events="events" visible="visible"></EventCreationDialog>


    </Authorized>
    <NotAuthorized>
        <AccessDenied></AccessDenied>
    </NotAuthorized>

</AuthorizeView>



@code {

    public List<EventDto> events = new List<EventDto>();

    public string UserId { get; set; }

    MudBlazor.DialogOptions options { get; set; } = new MudBlazor.DialogOptions()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        CloseButton = true
    };

    MudDialog dialog { get; set; } = new MudDialog();

    bool visible { get; set; } = false;

    HttpClient http = new HttpClient();

    #region Létrehozás / Módosítás / Duplikálás

    public EventDto newEvent { get; set; } = new EventDto();
    public LinkedList<TicketDto> tickets { get; set; } = new LinkedList<TicketDto>();
    public TicketDto ticketfirst { get; set; } = new TicketDto();
    public bool choice = false;

    #endregion

    public string ModifyButton = "Létrehozás";

    protected override void OnInitialized()
    {
        newEvent.Location = "";
        newEvent.Name = "";
        newEvent.StartDate = DateTime.Now;

    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        UserId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;

        newEvent.CreatorUserId = UserId;

        http = HttpClientFactory.CreateClient("BlazorPL.PublicServerAPI");
        events = await http.GetFromJsonAsync<List<EventDto>>($"api/events/creator?userId={UserId}");
        AllEvents = events;
    }
    private void OpenDialog()
    {
        ModifyButton = "Létrehozás";
        newEvent = new EventDto();
        newEvent.StartDate = DateTime.Now;
        newEvent.CreatorUserId = UserId;
        ticketfirst = new TicketDto();
        tickets = new LinkedList<TicketDto>();
        choice = false;
        visible = true;
    }


    public void Remove(EventDto e)
    {
        events.Remove(e);
        visible = false;
    }

    public async Task Duplicate(EventDto e)
    {
        newEvent = new EventDto()
        {
            CreatorUserId = e.CreatorUserId,
            Description = e.Description,
            Location = e.Location,
            Name = e.Name,
            StartDate = e.StartDate,
            ImageName = e.ImageName
        };
        newEvent.Id = 0;
        ModifyButton = "Másolat létrehozása";
        tickets = await http.GetFromJsonAsync<LinkedList<TicketDto>>($"api/tickets/event?eventid={e.Id}");
        if (tickets != null && tickets.Count() != 0)
        {
            ticketfirst = tickets.First();
            tickets.RemoveFirst();
        }
        choice = true;
        visible = true;
    }

    public async Task Modify(EventDto e)
    {

        newEvent = new EventDto()
        {
            Id = e.Id,
            CreatorUserId = e.CreatorUserId,
            Description = e.Description,
            Location = e.Location,
            Name = e.Name,
            StartDate = e.StartDate,
            ImageName = e.ImageName
        };
        ModifyButton = "Módosít";
        tickets = await http.GetFromJsonAsync<LinkedList<TicketDto>>($"api/tickets/event?eventid={e.Id}");
        if (tickets != null && tickets.Count()!=0)
        {
            ticketfirst = tickets.First();
            tickets.RemoveFirst();
        }
        choice = true;
        visible = true;
    }

    public void Add(EventDto e)
    {
        var ev = events.Where(sh => sh.Id == e.Id).FirstOrDefault();
        if (ev != null)
        {
            events.Add(e);
        }
    }

    public void ModifyClick(EventDto e)
    {
        var ev = events.Where(s => s.Id == e.Id).FirstOrDefault();
        if (ev != null)
        {
            ev.CreatorUserId = UserId;
            ev.Name = e.Name;
            ev.StartDate = e.StartDate;
            ev.Location = e.Location;
            ev.ImageName = e.ImageName;
            ev.Description = e.Description;
        } 
    }



    #region Szűrés

    public List<EventDto> AllEvents = new List<EventDto>();
    public string Filter { get; set; } = "";
    public string FilterType { get; set; }

    public async Task FilterBy()
    {
        if (String.IsNullOrEmpty(Filter)) events = AllEvents;
        else
        {
            switch (FilterType)
            {
                case ("Program neve"):
                    events = AllEvents.Where(f => f.Name.ToUpper().Contains(Filter.ToUpper())).ToList();
                    break;
                case ("Helyszín"):
                    events = AllEvents.Where(f => f.Location.ToUpper().Contains(Filter.ToUpper())).ToList();
                    break;
                case ("Dátum (yyyy.MM.dd.)"):
                    string[] args = Filter.Split('.');
                    DateTime date = new DateTime(int.Parse(args[0]), int.Parse(args[1]), int.Parse(args[2]));
                    events = AllEvents.Where(f => f.StartDate == date).ToList();
                    break;
                case ("Szervező neve"):
                    var http = HttpClientFactory.CreateClient("BlazorPL.PublicServerAPI");
                    var users = await http.GetFromJsonAsync<List<UserDto>>($"api/users/name?name={Filter}");
                    events = new List<EventDto>();
                    foreach (var u in users)
                    {
                        events.AddRange(AllEvents.Where(e => e.CreatorUserId == u.Id).ToList());
                    }
                    break;
                default:
                    events = AllEvents;
                    break;
            }
        }
    }

    public void RemoveFilter()
    {
        Filter = "";
        events = AllEvents;
    }
    #endregion
}
