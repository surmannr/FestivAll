@page "/cart"
@inject AuthenticationStateProvider AuthState
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager uriHelper
@inject CartState State
@implements IDisposable
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager nav
@inject IDialogService DialogService

@using SharedLayer.Enums

<AuthorizeView>
    <Authorized>
        <MudPaper Class="d-flex justify-center py-7 p-5" Style="margin-top:20px; background-color: rgba(0,0,0,0.5)" Square="false">
            <MudText Typo="Typo.h2" Align="Align.Center" Style="margin-top: 10px; margin-bottom:20px; color: #ECEFF1"><b>Kosár</b></MudText>
        </MudPaper>
        <MudPaper Class="d-flex flex-column align-items-center py-7 p-5" Style="margin-top:15px; height:100%; background-color: rgba(0,0,0,0.5)" Square="false">

            @if (State.Carts != null)
            {
                @if (State.Carts.Count() > 0)
                {
                    <MudTable Items="State.Carts" Context="o" FixedHeader="true" Style="width:100%" Height="400px">
                        <ColGroup>
                            <col style="width:35%;" />
                            <col style="width: 35%;" />
                            <col style="width:10%;" />
                            <col style="width:10%;" />
                            <col style="width:10%;" />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Program neve</MudTh>
                            <MudTh Style="text-align: left">Jegy kategória</MudTh>
                            <MudTh Style="text-align: right">Mennyiség</MudTh>
                            <MudTh Style="text-align: right">Ár</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Program neve">@o.EventName</MudTd>
                            <MudTd Style="text-align: left" DataLabel="Jegy kategória">@o.TicketCategory</MudTd>
                            <MudTd DataLabel="Mennyiség">
                                <MudTextField T="int" Value="o.Amount" ValueChanged="(v) => State.SumPriceWithParams(o,v)" Immediate="true" Placeholder="Mennyiség" Variant="Variant.Text" InputType="InputType.Number"></MudTextField>
                            </MudTd>
                            <MudTd Style="text-align: right" DataLabel="Ár">@o.TicketPrice Ft</MudTd>
                            <MudTd Style="text-align: center">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" @onclick="() => RemoveCart(o)" />
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager RowsPerPageString="Találatok száma" PageSizeOptions="new int[]{5,10}" DisableRowsPerPage="true" />
                        </PagerContent>
                    </MudTable>
                    <MudPaper Width="100" Style="width:100%; margin-top:10px; padding:20px; height:50%; display:flex; flex-direction:column; justify-content:space-around">
                        <MudGrid Justify="Justify.SpaceAround" Style="width:100%;">
                            <MudItem xs="3" Style="display:flex; align-items:flex-end">
                                <MudText Typo="Typo.body1" Align="Align.Left" Style="font-size:20px"><b>Fizetési mód:</b></MudText>
                            </MudItem>
                            <MudItem xs="3" Class="d-flex align-items-baseline justify-center mud-width-full">
                                <MudSelect T="string" Label="Fizetési mód" @bind-Value="selectedPaymentMethod">
                                    @foreach (var a in paymentmethods)
                                    {
                                        <MudSelectItem Value="@ReturnPaymentmethod((PaymentMethod)a)"/>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6" Style="display:flex; align-items:flex-end">
                                <MudDivider DividerType="DividerType.Middle" Style="width:100%; background-color:black; color:black"></MudDivider>
                            </MudItem>
                        </MudGrid>
                        <MudGrid Justify="Justify.SpaceAround" Style="width:100%; margin-top:10px">
                            <MudItem xs="3" Style="display:flex; align-items:flex-end">
                                <MudText Typo="Typo.body1" Align="Align.Left" Style="font-size:20px"><b>Szállítási mód:</b></MudText>
                            </MudItem>
                            <MudItem xs="3" Class="d-flex align-items-baseline justify-center mud-width-full">
                                <MudSelect T="string" Label="Szállítási mód" @bind-Value="selectedShippingMethod">
                                    @foreach (var a in shippingmethods)
                                    {
                                        <MudSelectItem Value="@ReturnShippingMethod((ShippingMethod)a)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6" Style="display:flex; align-items:flex-end; justify-content:center">
                                <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Dark" Style="font-size:30px"><u>Végösszeg: @State.sumprice.ToString("N0") Ft</u></MudText>
                            </MudItem>
                        </MudGrid>
                        <MudGrid Justify="Justify.Center" Style="width:100%;">
                            <MudItem xs="12" Style="display:flex; align-items:flex-end; justify-content:center; margin-top:10px">
                                <MudButton Disabled="State.ButtonDisabled" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Info" @onclick="Buy">Vásárlás</MudButton>
                            </MudItem>

                        </MudGrid>
                    </MudPaper>

                }
                else
                {
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="margin-top: 10px; margin-bottom:20px; color:aliceblue">A kosár üres.</MudText>
                }
            }

        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin></RedirectToLogin>
    </NotAuthorized>

</AuthorizeView>


@code {

    public CartDto[] carts { get; set; }

    public Array paymentmethods { get; set; } = Enum.GetValues(typeof(PaymentMethod));
    public Array shippingmethods { get; set; } = Enum.GetValues(typeof(ShippingMethod));

    public string userId { get; set; }

    public string selectedPaymentMethod { get; set; }
    public string selectedShippingMethod { get; set; }

    public HttpClient http { get; set; }

    public string SnackbarMessage { get; set; } = "alap";

    protected async override Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        userId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;

        http = HttpClientFactory.CreateClient("BlazorPL.PublicServerAPI");
        carts = await http.GetFromJsonAsync<CartDto[]>($"api/users/carts?userid={userId}");

        paymentmethods = Enum.GetValues(typeof(PaymentMethod));
        shippingmethods = Enum.GetValues(typeof(ShippingMethod));

        selectedPaymentMethod = ReturnPaymentmethod(PaymentMethod.Cash);
        selectedShippingMethod = ReturnShippingMethod(ShippingMethod.DeliverByPost);

        if (carts != null)
        {
            State.Initialize(carts);
        }


    }
    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
        nav.LocationChanged += BeforeUnloadHandler;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
        nav.LocationChanged -= BeforeUnloadHandler;
    }

    public string ReturnPaymentmethod(PaymentMethod payment)
    {
        switch (payment.ToString())
        {
            case ("Cash"):
                return "Utánvétel";
            case ("CreditCard"):
                return "Bankkártya";
            case ("BankTransfer"):
                return "Banki átutalás";
            default:
                return "Utánvétel";
        }
    }

    public PaymentMethod GetPayment(string payment)
    {
        switch (payment)
        {
            case ("Utánvétel"):
                return PaymentMethod.Cash;
            case ("Bankkártya"):
                return PaymentMethod.CreditCard;
            case ("Banki átutalás"):
                return PaymentMethod.BankTransfer;
            default:
                return PaymentMethod.Cash;
        }
    }

    public string ReturnShippingMethod(ShippingMethod shipping)
    {
        switch (shipping.ToString())
        {
            case ("DeliverByPost"):
                return "Postai átvétel";
            case ("DeliverByUps"):
                return "UPS futár";
            case ("DeliverByAmazoneDrone"):
                return "Amazon drón";
            default:
                return "Postai átvétel";
        }
    }

    public ShippingMethod GetShipping(string shipping)
    {
        switch (shipping)
        {
            case ("Postai átvétel"):
                return ShippingMethod.DeliverByPost;
            case ("UPS futár"):
                return ShippingMethod.DeliverByUps;
            case ("Amazon drón"):
                return ShippingMethod.DeliverByAmazoneDrone;
            default:
                return ShippingMethod.DeliverByPost;
        }
    }

    public async Task RemoveCart(CartDto o)
    {
        bool? dialogresult = await DialogService.ShowMessageBox(
           "Figyelmeztetés",
           "Biztosan ki szeretnéd törölni ezt a tételt?",
           yesText: "Igen", cancelText: "Mégse");
        if(dialogresult != null)
        {
            var result = await Http.DeleteAsync($"api/users/delete-cart?ticketid={o.TicketId}&userid={userId}");
            if (result.IsSuccessStatusCode)
            {
                SnackbarMessage = $"Sikeresen törölted a tételt!";
                Snackbar.Add(SnackbarMessage, Severity.Success);
                State.Remove(o);
                StateHasChanged();
            }
            else
            {
                SnackbarMessage = "Sikertelen törlés.";
                Snackbar.Add(SnackbarMessage, Severity.Error);
            }
            State.SumPrice();
        }

    }

    public async Task Buy()
    {
        bool? dialogresult = await DialogService.ShowMessageBox(
            "Vásárlás",
            "Biztosan meg szeretnéd venni?",
            yesText: "Igen", cancelText: "Mégse");
        if(dialogresult != null)
        {
            PaymentMethod pmeth = GetPayment(selectedPaymentMethod);
            ShippingMethod smeth = GetShipping(selectedShippingMethod);
            List<OrderItemDto> orderitems = new List<OrderItemDto>();
            foreach (var c in State.Carts)
            {
                orderitems.Add(new OrderItemDto()
                {
                    Amount = c.Amount,
                    EventName = c.EventName,
                    Price = c.TicketPrice,
                    TicketCategory = c.TicketCategory,
                    TicketId = c.TicketId,
                    Status = Status.New
                });
            }
            OrderDto orderDto = new OrderDto()
            {
                Status = Status.New,
                UserId = userId,
                OrderItems = orderitems,
                PaymentMethod = pmeth,
                ShippingMethod = smeth,
                OrderDate = DateTime.Now
            };
            var temp = await http.PostAsJsonAsync<OrderDto>($"api/orders", orderDto);
            var order = await temp.Content.ReadFromJsonAsync<OrderDto>();
            foreach (var item in orderitems)
            {
                item.OrderId = order.Id;
                await http.PostAsJsonAsync<OrderItemDto>($"api/orderitems", item);
            }
            await http.PostAsJsonAsync($"api/users/cart-to-bought", orderDto);
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }

    }

    public async void BeforeUnloadHandler(object sender, LocationChangedEventArgs args)
    {
        await http.PutAsJsonAsync($"api/users/carts", State.Carts);
    }
}
