@using System.Net.Http
@inject AuthenticationStateProvider AuthState
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager uriHelper
@inject ISnackbar Snackbar

<MudExpansionPanel Dense="true" DisableGutters="true" HideIcon="true" @onclick:preventDefault="true">
    <TitleContent>
        @if (_event != null)
        {
            <MudGrid Justify="Justify.Center" Spacing="3" Style="margin-left:30px;">
                <MudItem xs="3">
                    <a href="/event/@_event.Id"><MudText Class="mt-1"><b>@_event.Name</b></MudText></a>
                </MudItem>
                <MudItem xs="3">
                    <MudText Class="mt-1">@_event.Location</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Class="mt-1">@_event.StartDate.ToShortDateString()</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudRating SelectedValue="@AverageReview" ReadOnly="true" />
                </MudItem>
                <MudItem xs="2" Style="letter-spacing:10px">

                    <AuthorizeView>
                        <Authorized>
                            <div class="w-100" @onclick:stopPropagation="true">
                                <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" @onclick="AddFollowedEvent" />
                                <a href="/tickets">
                                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Dark" />
                                </a>
                                <MudIcon Icon="@Icons.Material.Filled.RateReview" Color="Color.Dark" @onclick="AddReviewToEvent" />
                            </div>
                            
                        </Authorized>
                        <NotAuthorized>
                            <div class="w-100" @onclick:stopPropagation="true">
                                <a href="/login">
                                    <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" />
                                </a>
                                <a href="/login">
                                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Dark" />
                                </a>
                                <a href="/login">
                                    <MudIcon Icon="@Icons.Material.Filled.RateReview" Color="Color.Dark" />
                                </a>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>

                </MudItem>
            </MudGrid>
        }

    </TitleContent>
    

    
    <ChildContent>
        <div style="background-color:#dfe4ea;padding-bottom:10px;display:flex; justify-content:center">
            <MudDivider />
            <MudGrid Justify="Justify.Center" Spacing="3" Style="margin-left:30px; align-items:baseline">
                <MudItem xs="3">
                    <MudText Class="mt-1">Vélemény írása:</MudText>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField T="string" Label="Vélemény írása..." @bind-value=newReviewDescription />
                </MudItem>
                <MudItem xs="3">
                    <MudText Align="Align.Center" Class="mt-1">Értékelés:</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudRating @bind-value=newReviewStars @bind-SelectedValue="newReviewStars" @bind-value:event="onchange" />
                </MudItem>
            </MudGrid>
        </div>
    </ChildContent>
</MudExpansionPanel>


@code {

    #region Paraméterek
    // Paraméterek a komponenshez

    [Parameter]
    public EventDto _event { get; set; }

    public int AverageReview { get; set; } = 0;
    #endregion

    #region Új értékeléshez

    // Új értékeléshez adatok

    public int newReviewStars { get; set; } = 1;

    public string newReviewDescription { get; set; }

    public ReviewDto newReview { get; set; } = new ReviewDto();

    public string SnackbarMessage { get; set; } = "Az értékeléshez minden értéket ki kell tölteni!";

    #endregion

    public string userId { get; set; } = "";

    protected override void OnInitialized()
    {
        newReview.Stars = newReviewStars;
        CountAverageReview();

    }
    public void Click() { }
    public void CountAverageReview()
    {
        if (_event != null)
        {
            AverageReview = 0;
            foreach (ReviewDto r in _event.Reviews)
            {
                AverageReview += r.Stars;
            }
            if (_event.Reviews.Count() == 0) AverageReview = 0;
            else AverageReview = AverageReview / _event.Reviews.Count();

        }
    }
    public async Task AddReviewToEvent()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        userId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;
        if (String.IsNullOrEmpty(newReviewDescription) || newReviewStars == 0)
        {
            SnackbarMessage = "Az értékeléshez minden értéket ki kell tölteni!";
            Snackbar.Add(SnackbarMessage, Severity.Error);
        }
        else
        {
            SnackbarMessage = $"Sikeresen értékelted a(z) {_event.Name} eseményt!";
            newReview.Description = newReviewDescription;
            newReview.Stars = newReviewStars;
            newReview.EventId = _event.Id;
            newReview.UserId = userId;
            var result = await Http.PostAsJsonAsync("api/reviews", newReview);
            if (result.IsSuccessStatusCode)
            {
                _event.Reviews.Add(new ReviewDto() { 
                    Description = newReviewDescription,
                    Stars = newReviewStars,
                    EventId = _event.Id,
                    UserId = userId
                });
                CountAverageReview();
                Snackbar.Add(SnackbarMessage, Severity.Success);
            }
            else
            {
                SnackbarMessage = "Az értékelésnél hiba történt. Kérlek próbáld meg újból.";
                Snackbar.Add(SnackbarMessage, Severity.Error);
            }
            if (Snackbar.ShownSnackbars.Count() == 0) uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            newReviewDescription = "";
        }
    }

    public async Task AddFollowedEvent()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        userId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;
        var result = await Http.PostAsJsonAsync($"api/users/followed-event?userid={userId}&eventid={_event.Id}", _event.Name);
        if (result.IsSuccessStatusCode)
        {
            SnackbarMessage = $"Sikeresen a kedvencek közé adtad a(z) {_event.Name} eseményt!";
            Snackbar.Add(SnackbarMessage, Severity.Success);
        } else
        {
            SnackbarMessage = $"Nem sikerült a kedvencek közé adni a(z) {_event.Name} eseményt!\n" +
                    $"Lehet már ott van a kedvenceid között.";
            Snackbar.Add(SnackbarMessage, Severity.Error);
        }
    }
}
